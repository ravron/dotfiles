" Contents
" I. Built-in settings
"   1. Appearance
"   2. Behavior
" II. Custom settings
"   1. Appearance
"   2. Behavior
"
" Note that some file-specific settings are found instead in
" ~/.vim/ftplugin/<filetype>.vim , if putting them there makes more sense

"===============================================================================

""
" I. Built-in settings
""

"" 1. Appearance

" Show line numbers
set number
" Don't restrict draw speed
set ttyfast
" Detect filetypes
filetype on
" Highlight search terms
set hlsearch
" Always display a statusline
set laststatus=2

" Sets up the statusline. See ':h statusline'
set statusline=%0.120F              " full path
set statusline+=\ Win:%{winnr()}    " window number
set statusline+=%m                  " modified flag
set statusline+=%=                  " middle divider
set statusline+=%15.15c             " column number
set statusline+=\ %l/%L             " line number, total line
set statusline+=\ [%p%%]            " percent through file

" 'Report,' or show on the command line, all changes
set report=0

" Show lines that are wrapped with '> '
set showbreak=>\

" Show in-progress commands
set showcmd

" Set window title to name of file
set title
set titlestring=%f                  " relative path
set titlelen=85

set termguicolors
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox
syntax enable

" Show background color on entire cursor line
" Broken righ tnow, see https://github.com/vim/vim/issues/2584
"set cursorline
"highlight CursorLine ctermbg=NONE cterm=underline

" Highlight json files like javascript
autocmd BufNewFile,BufRead *.json set ft=javascript

" Highlight various Fastlane files like Ruby
autocmd BufNewFile,BufRead Fastfile,Appfile,Deliverfile call SetRubyOptions()
" Highlight Brewfiles like Ruby
autocmd BufNewFile,BufRead Brewfile call SetRubyOptions()
function SetRubyOptions()
    set filetype=ruby
    " https://stackoverflow.com/a/16920294/1292061
    set nocursorline
endfunction


autocmd BufNewFile,BufRead .arcunit,.arclint set filetype=json
" Highlight Python stub files like Python (because they are Python!)
autocmd BufNewFile,BufRead *.pyi set filetype=python
" Treat any file matching *?config in any .config/git as a git config file
autocmd BufNewFile,BufRead *.config/git/*?config set filetype=gitconfig
" Treat any file matching *?config in ~/.ssh as an ssh config file
autocmd BufNewFile,BufRead ~/.ssh/*?config set filetype=sshconfig



"" 2. Behavior

" Allow mouse use
set mouse=a
" Make the backspace key work as expected
set backspace=indent,eol,start
" Don't put in actual <tab>s, use <space>s instead
set expandtab
" How many spaces to use when <tab> is pressed
set tabstop=4
" How many spaces to use when indentation is increased/decreased
set shiftwidth=4
" Set the default wrapping width for all files
set textwidth=80
" During softwrapping, break at whitespace
set linebreak
" Turn on filetype identification
filetype on
" Indent based on filetype identification
filetype plugin indent on
" Cause ~ to behave as an operator
set tildeop
" Search incrementally
" set incsearch
" Split new windows above current window
set splitbelow
" Split new windows to the right of current window
set splitright
" Set key sequence timeout in ms
set timeoutlen=300
" Use autoindent
set autoindent
" Ignore case by default...
set ignorecase
" ...unless there's one or more uppercase letters in the search
set smartcase
" Write to swapfile and update vim-gitgutter more often
set updatetime=250
" Use one space between sentences, not two
set nojoinspaces

" Persistent undo
set undofile
" Undo save location
set undodir=$HOME/.vim/undo

" Spelling region is en_us
set spelllang=en_us

" Map \c to clear highlight
nnoremap <Leader>c :noh<CR>

" Don't expand tabs in gitconfig files
autocmd FileType gitconfig setlocal noexpandtab

" Tell sh.vim shell syntax highlighting that I use bash. See
" https://github.com/vim/vim/blob/master/runtime/syntax/sh.vim
let g:is_bash=1

" netrw
" Always use tree list style
let g:netrw_liststyle=3
" Don't print a banner
let g:netrw_banner=0
" Set :Lexplore width (careful, it's weird, see help)
let g:netrw_winsize=20
" Allow use of the ctrl-tab netrw shortcut
let g:netrw_usetab=1
" But remap it anyways because most terminals can't send ctrl-tab
nmap <unique> <tab> <Plug>NetrwShrink
" Minimum width when shrinking Lexplore window
let g:netrw_wiw=4





""
" II. Custom settings
""

"" 1. Appearance


" Add 'C' command to clear search highlighting
command! C let @/=""

" Color the 80th column to indicate ANSI length limit
"highlight ColorColumn ctermbg=8
"set colorcolumn=80
" Highlight any text that is past the 80 char limit
"highlight OverLength ctermbg=240
"match OverLength /\%81v.\+/

" Highlighting for the status line using StatusLineHighlight plugin
highlight def StatusLineModified        term=reverse cterm=reverse ctermfg=124 ctermbg=235 gui=reverse
highlight def StatusLineModifiedNC      term=reverse cterm=reverse ctermfg=88  ctermbg=235 gui=reverse
highlight def StatusLinePreview         term=reverse cterm=reverse ctermfg=245 ctermbg=235 gui=reverse
highlight def StatusLinePreviewNC       term=reverse cterm=reverse ctermfg=240 ctermbg=235 gui=reverse
highlight def StatusLineReadonly        term=reverse cterm=reverse ctermfg=28  ctermbg=235 gui=reverse
highlight def StatusLineReadonlyNC      term=reverse cterm=reverse ctermfg=22  ctermbg=235 gui=reverse
highlight def StatusLineSpecial         term=reverse cterm=reverse ctermfg=245 ctermbg=235 gui=reverse
highlight def StatusLineSpecialNC       term=reverse cterm=reverse ctermfg=240 ctermbg=235 gui=reverse
highlight def StatusLineUnmodifiable    term=reverse cterm=reverse ctermfg=245 ctermbg=235 gui=reverse
highlight def StatusLineUnmodifiableNC  term=reverse cterm=reverse ctermfg=240 ctermbg=235 gui=reverse


"" 2. Behavior


" See https://github.com/xolox/vim-easytags/blob/master/README.md Do tag updates
" in the background
let g:easytags_async=1
" Don't auto-update highlighting (can do with :HighlightTags if desired but
" beware) it slows things down like crazy when tags file is large.
let g:easytags_auto_highlight=0

" Tell gitgutter that my terminal doesn't know how to report focus.
let g:gitgutter_terminal_reports_focus=0

" Use actual tabs in Makefiles (they won't work with spaces)
autocmd FileType make setlocal noexpandtab
" Use actual tabs in files named exactly 'Makecfg' or 'Makerules'
autocmd BufNewFile,BufRead Makecfg,Makerules setlocal noexpandtab

" Use actual tabs in Go files
autocmd FileType go setlocal noexpandtab

" Use two spaces in various files
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2

" Hard-wrap text in a Phabricator diff description or update message to 150 cols
autocmd BufRead */edit.*/new-commit,*/edit.*/differential-update-comments setlocal textwidth=150

" Don't try to write backups with crontab, that confuses it
autocmd FileType crontab setlocal nobackup nowritebackup

" Don't change the eol on json files
autocmd FileType json setlocal nofixeol

" Turn on spellcheck for markdown files
autocmd FileType markdown setlocal spell

" Remove all trailing spaces on save in listed file types
" See https://vi.stackexchange.com/a/3971/5598
augroup TrailingSpace
    autocmd!
    autocmd FileType c,cpp,python,markdown,javascript,typescript
        \ autocmd! TrailingSpace BufWrite <buffer> silent! %s/ \+$//
augroup END


" Don't allow the cursor to get within 3 lines of the bottom or top of screen
set scrolloff=3

" Remap 'jj' to the <ESC> key in insert mode, so that pressing that
" combination quickly in series will return to normal mode
" Disabled right now to train me to use caps lock
" inoremap jj <ESC>

" Remap 'Y' in normal mode to yank to the end of the line rather than yank the
" whole line. See :h Y
nnoremap Y y$

" Remap vim-gitgutter next hunk and previous hunk
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
